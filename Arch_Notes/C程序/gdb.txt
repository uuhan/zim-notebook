Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-12-03T18:22:14+08:00

====== gdb ======
Created 星期一 03 十二月 2012

最简单的例子

1编译生成可执行文件 gcc -g test.c -o test

一定注意 如果不加入-g参数 是无法使用gdb调试的 -g选项加入了调试信息

2启动gdb

gdb test

3在main函数处设置断点

break main

4运行程序

run

5单步运行

next

6继续运行

continue

7finish 运行程序直到当前函数结束

8watch 变量名 对指定的变量进行监控

9qiut（q）退出gdb

10print（p）+变量名 查看指定变量值

list（l）查看程序

break （行号/函数名）

 

以下为转载内容：

当程序出错并产生core 时
快速定位出错函数的办法
gdb 程序名 core文件名(一般是core,也可能是core.xxxx)

调试程序使用的键
r run 运行.程序还没有运行前使用
c cuntinue 继续运行。运行中断后继续运行
q 退出
kill 终止调试的程序
h help 帮助
<tab> 命令补全功能

step 跟入函数
next 不跟入函数
b breakpoint 设置断点。
用法:
b 函数名 对此函数进行中断
b 文件名:行号 对此文件中指定行中断.假如是当前文件，那么文件名与:号可以
省略
看当前断点数使用info break.禁止断点disable 断点号.删除delete 断点号.

l list 列出代码行。一次列10 行。连接使用list将会滚动显示. 也可以在list 后面
跟上 文件名:行号
watch 观察一个变量的值。每次中断时都会显示这个变量的值
p print 打印一个变量的值。与watch不同的是print只显示一次
这里在顺便说说如何改变一个 value. 当你下指令 p 的时候,例如你用 p b,
这时候你会看到 b 的 value, 也就是上面的 $1 = 15.
你也同样可以用 p 来改变一个 value, 例如下指令 p b = 100 试试看,
这时候你会发现, b 的 value 就变成 100 了：$1 = 100.



网上抄录
基本的使用方法简介
前言
程序代码中的错误可分为数类，除了最轻易除错的语法错误，编译程序会告诉你错误所在外，大部分的错误都可以归类为执行时错误。GDB 的功能便是寻找执行时错误。假如没有除错程序，我们只能在程序中加入输出变量值的指令来了解程序执行的状态。有了 GDB 除错程序，我们可以设定在任何地方停止程序的执行，然后可以随意检视变量值及更动变量，并逐行执行程序。
一个除错程序执行的流程通常是这样的：

1. 进入除错程序并指定可执行文件。
2. 指定程序代码所在目录。
3. 设定断点后执行程序。
4. 程序于断点中断后，可以 (1)检视程序执行状态；检视变量值或变更变量值 (2) 逐步执行程序，或是全速执行程序到下一个断点或是到程序结束为止。
5. 离开除错程序。
以下将分为下列数项分别介绍：
1. 进入 GDB 及指定可执行档
2. 指定程序代码所在目录及检视程序代码
3. 断点的设定与清除
4. 全速及逐步执行程序
5. 检视及更改变量值
6. 检视程序执行状态
7. 读取 Core 文件信息
进入 GDB 及指定可执行档：
1. 进入 GDB 并读入可执行档 (档名为 'PROGRAM')，预备进行除错。
gdb PROGRAM
指定程序代码所在目录及检视程序代码
1. 增加目录 DIR 到收寻程序代码的目录列表 (假如你的程序代码和可执行档放在同一个目录下，就不须指定程序代码所在目录。)：
(gdb) Directory DIR

2. 检视程序代码，格式计有：
(gdb) list => 显示目前执行程序代码前后各五行的程序代码；或是显示从上次 list 之后的程序代码
(gdb) list => 显示该程序开始处前后五行的程序代码。
(gdb) list - =>上次显示程序代码的前面的十行。
断点的设定与清除
1. 设定断点(指令为 break，可简写为 (b)，格式计有：
(gdb) break filename.c:30 => 在 filename.c 的第三十行处停止执行。
(gdb) break => 在进入 时中断程序的执行。
(gdb) break filename.c: => 在程序代码档 filename.c 中的函数 处设定断点。
(gdb) break => 在下一个将被执行的命令设定断点。
(gdb) break ... if cond => 只有当 cond 成立的时候才中断。cond 须以 C 语言的语法写成。

2. 显示各个断点的信息。
(gdb) info break

3. 清除断点(命令为 clear)，格式同 break 。例如 :
(gdb) clear filename.c:30

4. 清除断点，NUM 是在 info break 显示出来的断点编号。
(gdb) delete NUM
全速及逐步执行程序
1. 从程序开头全速执行程序，直到碰到断点或是程序执行完毕为止。
(gdb) run

2. 在程序被中断后，全速执行程序到下一个断点或是程序结束为止 (continue 指令可简写为 c)。
(gdb) continue

3. 执行一行程序. 若呼叫函数, 则将该包含该函数程序代码视为一行程序 (next 指令可简写为 n)。

(gdb) next

4. 执行一行程序. 若呼叫函数, 则进入函数逐行执行 (step 指令可简写为 s)。
(gdb) step

5. 执行一行程序，若此时程序是在 for/while/do loop 循环的最后一行，则一直执行到循环结束后的第一行程序后停止 (until 指令可简写为 u)。
(gdb) until

6. 执行现行程序到回到上一层程序为止。
(gdb) finish
检视及更改变量值
1. print 叙述，显示该叙述执行的结果 (print 指令可简写为 p)。如
(gdb) print a => 显示 a 变量的内容.
(gdb) print sizeof(a) => 显示 a 变量的长度.

2. display 叙述，在每个断点或是每执行一步时显示该叙述值。如
(gdb) display a

3. 更改变量值：
(gdb) print (a=10) => 将变量 a 的值设定为 10.

检视程序执行状态
1. 查看程序执行到此时，是经过哪些函数呼叫的程序 (backtrace 指令可简写为 BT)，也就是查看函数呼叫堆栈。
(gdb) backtrace
读取 Core 文件信息
1. 读入 PROGRAM 及 PROGRAM.CORE 档，可检视 Core Dump 时程序变量值及程序流程状态 。
gdb PROGRAM core
说明：'core' 档案是由 PROGRAM 档执行后，碰到 Core Dump 时产生的 Core 檔檔名。假如你还需要该 Core 档，我们建议你将该档案档名更改为 PROGRAM.core。在输入上述命令后，你可以用 GDB 提供的检视变量值以及检视程序执行状态来读取程序 Core Dump 时的状态。

补充一点儿
（最近我刚在用gdb，感觉还不错，不过有的时候还是眼睛加printf更好
使）
我更多是用gdb直接调试程序，而不是core

gdb 可执行文件名 （进入gdb环境）

set ags -? (设置参数，即向你要调试的程序传参)

另外，用break Name 和break lineNum都可以设置断点
用info break 可以查看当前断点的信息
用clear清除断点的时候要和break相对应
假如是用Name设置的断点就只能 clear Name
用lineNum设置的断点就只能用clear lineNum

BTW:可以到www.sunfreeware.com去下载gdb

以上是我近几天学习gdb的一点经验，都是我犯过错误的地方
希望对与我等同类的gdb菜鸟们有所帮助。

假如是刚开始时也可以使用ddd
图形化的

另外对于断点可以使用
delete 断点号
删除
断点号可以使用info break 得到

我也说说我的体会：
r (程序运行的参数) 可以设置运行时的参数
shell 运行shell环境的东西，比如shell make，完了以后直接r重新启动程序，就可以带上次已经加过的参数运行，不用再敲参数了
b 文件名:行号 有的时候很有用，嘿嘿
info b 看断点信息
disable 断点号 暂停某个断点
enable 断点号 启动某个断点
delete (断点号) 删除某个断点，不带断点号，全部删除
x/32uxb 指针 以16进制显示该指针指向的32个字节的数据

在Linux的c编程中大家经常用gdb调试程序，以下是一些常用的指令
1.break
在某个函数上设置断点。函数重载时，有可能同时在几个重载的函数上设置了断点

break +OFFSET
break -OFFSET
在当前程序运行到的前几行或后几行设置断点

break LINENUM
在行号为LINENUM的行上设置断点

break FILENAME:LINENUM
在文件名为FILENAME的原文件的第LINENUM行设置断点

break FILENAME:
在文件名为FILENAME的函数上设置断点
当你的多个文件中可能含有相同的函数名时必须给出文件名。

break *ADDRESS
在地址ADDRESS上设置断点，这个命令答应你在没有调试信息的程序中设置断点

break
当break命令不包含任何参数时，break命令在当前执行到的程序运行栈中的
下一条指令上设置一个断点。除了栈底以外，这个命令使程序在一旦从当前
函数返回时停止。相似的命令是finish，但finish并不设置断点。这一点在
循环语句中很有用。gdb在恢复执行时，至少执行一条指令。

break ... if COND
这个命令设置一个条件断点，条件由COND指定；在gdb每次执行到此断点时
COND都被计算当COND的值为非零时，程序在断点处停止

ignore BNUM COUNT'
设置第BNUM号断点的被忽略的次数为'COUNT'，即断点BNUM再执行到第COUNT+1
次时程序停止

tbreak ARGS 或者简写为 tb
设置断点为只有效一次。ARGS的使用同break中的参量的使用

hbreak ARGS
设置一个由硬件支持的断点。这个命令的主要目的是用于对EPROM/ROM程序的调试
因为这条命令可以在不改变代码的情况下设置断点。这可以同SPARCLite DSU一起
使用。当程序访问某些变量和代码时，DSU将设置“陷井”。注重：你只能一次使用
一个断点，在新设置断点时，先删除原断点

thbreak ARGS'
设置只有一次作用的硬件支持断点

rbreak REGEX
在所有满足表达式REGEX的函数上设置断点。这个命令在所有相匹配的函数上设置无
条件断点，当这个命令完成时显示所有被设置的断点信息。这个命令设置的断点和
break命令设置的没有什么不同。当调试C++程序时这个命令在重载函数上设置断点时
非常有用。

info breakpoints [N]
info break [N]
info watchpoints [N]
显示所有的断点和观察点的设置表，有下列一些列
*Breakpoint Numbers*----断点号
*Type*----断点类型(断点或是观察点)
*Disposition*---显示断点的状态
*Enabled or Disabled*---使能或不使能。'y'表示使能，'n'表示不使能。
*Address*----地址，断点在你程序中的地址(内存地址)
*What*---地址，断点在你程序中的行号。
假如断点是条件断点，此命令还显示断点所需要的条件。
带参数N的'info break'命令只显示由N指定的断点的信息。
此命令还显示断点的运行信息(被执行过几次)，这个功能在使用'ignore'
命令时很有用。你可以'ignore'一个断点许多次。使用这个命令可以查看断点
被执行了多少次。这样可以更快的找到错误。

maint info breakpoints
显示所有的断点，无论是你设置的还是gdb自动设置的。
断点的含义：
breakpoint：断点，普通断点
watchpoint：普通观察点
longjmp：内部断点，用于处理'longjmp'调用
longjmp resume：内部断点，设置在'longjmp'调用的目标上
until：'until'命令所使用的内部断点
finish：finish'命令所使用的内部断点

2.watch EXPR
为表达式（变量）expr设置一个观察点。一量表达式值有变化时，马上停住程序。
这个命令使用EXPR作为表达式设置一个观察点。GDB将把表达式加入到程序中并监
视程序的运行，当表达式的值被改变时GDB就使程序停止。这个也可以被用在SPARClite
DSU提供的新的自陷工具中。当程序存取某个地址或某条指令时(这个地址在调试寄
存器中指定),DSU将产生自陷。对于数据地址DSU支持'watch'命令,然而硬件断点寄
存器只能存储两个断点地址，而且断点的类型必须相同。就是两个'rwatch'型断点

或是两个'awatch'型断点。

rwatch EXPR'
设置一个观察点，当EXPR被程序读时，程序被暂停。

awatch EXPR'
设置一个观察点,当EXPR被读出然后被写入时程序被暂停。

info watchpoints
在多线程的程序中，观察点的作用很有限，GDB只能观察在一个线程中的表达式的值
假如你确信表达式只被当前线程所存取，那么使用观察点才有效。GDB不能注重一个
非当前线程对表达式值的改变。

rwatch <expr>
当表达式（变量）expr被读时，停住程序。

awatch <expr>
当表达式（变量）的值被读或被写时，停住程序。

info watchpoints
列出当前所设置了的所有观察点。


3.catch EXCEPTIONS
使用这个命令在一个被激活的异常处理句柄中设置断点。EXCEPTIONS是一个你要抓住
的异常。你一样可以使用'info catch'命令来列出活跃的异常处理句柄。

GDB中对于异常处理由以下情况不能处理：
* 假如你使用一个交互的函数，当函数运行结束时，GDB将象普通情况一样把控制返
回给你。假如在调用中发生了异常，这个函数将继续运行直到碰到一个断点，一个信号
或是退出运行。
* 你不能手工产生一个异常( 即异常只能由程序运行中产生 )
* 你不能手工设置一个异常处理句柄。
有时'catch'命令不一定是调试异常处理的最好的方法。假如你需要知道异常产生的
确切位置，最好在异常处理句柄被调用以前设置一个断点，这样你可以检查栈的内容。
假如你在一个异常处理句柄上设置断点，那么你就不轻易知道异常发生的位置和原因。
要仅仅只在异常处理句柄被唤醒之前设置断点，你必须了解一些语言的实现细节。

3.cont N
第N次经过该断点时才停止程序运行

4.enable 断点编号
恢复暂时失活的断点，要恢复多个编号的断点，可用空格将编号分开

5.disable 断点编号
使断点失效，但是断点还在

6.delete 断点编号或者表达式
删除某断点

7.clear 断点所在行号
清除某断点

8.查看断点列表
info break

9.watch counter>15
当counter>15的时候程序终止

10.当程序崩溃的时候linux会生成一个core文件，可以用
gdb a.out core
where
查看导致崩溃的原因

11.continue
恢复程序运行，直到碰到下一个断点

12.run
程序开始运行，直到碰到断点

13.step
执行一行代码

14.next
和s不同的是他不跟踪到代码的内部，一步一步执行代码

15.直接回车为执行上一个命令

16.print 变量
打印某一变量的值

17.display 变量
每次运行到断点就显示变量的值，用于观察变量的变化

18.set 变量=
在程序执行中重新设置某变量的值

19.printf "%2.2s\n",(char*)0x120100fa0
结果打印出：He

20. 设置gdb的列宽,以下为将屏幕设置为70列
set width 70

21. info args 列出你程序所接受的命令行参数
info registers列出寄存器的状态
info breakpoint列出在程序中设的断点
要获得具体的关于info的信息用help info.

22. set
这个命令用来为你的程序设置一个运行环境(使用一个表达式)。
set prompt $把gdb的提示符设为$.
set args 可指定运行时参数。（如：set args 10 20 30 40 50）
show args 命令可以查看设置好的运行参数。

23. show
show命令用来显示gdb自身的状态。
使用'set'命令可以改变绝大多数由'show'显示的信息
使用show radix命令来显示基数
用不带任何参变量的'set'命令可以显示所有可以设置的变量的值
有三个变量是不可以用'set'命令来设置的:
show version显示gdb的版本号
show copying显示版权信息
show warranty显示担保信息
一：列出文件清单    
  1．   List    
  (gdb)   list   line1,line2    
    
  二：执行程序    
  要想运行准备调试的程序，可使用run命令，在它后面可以跟随发给该程序的任何参数，包括标准输入和标准输出说明符(<和>)和外壳通配符（*、？、[、]）在内。    
  如果你使用不带参数的run命令，gdb就再次使用你给予前一条run命令的参数，这是很有用的。    
  利用set   args   命令就可以修改发送给程序的参数，而使用show   args   命令就可以查看其缺省参数的列表。    
  （gdb）set   args   –b   –x    
  (gdb)   show   args    
  backtrace命令为堆栈提供向后跟踪功能。    
  Backtrace   命令产生一张列表，包含着从最近的过程开始的所以有效过程和调用这些过程的参数。    
    
  三：显示数据    
  利用print   命令可以检查各个变量的值。    
  (gdb)   print   p   (p为变量名)    
  whatis   命令可以显示某个变量的类型    
  (gdb)   whatis   p    
  type   =   int   *    
    
  print   是gdb的一个功能很强的命令，利用它可以显示被调试的语言中任何有效的表达式。表达式除了包含你程序中的变量外，还可以包含以下内容：    
  l   对程序中函数的调用    
  (gdb)   print   find_entry(1,0)    
  l   数据结构和其他复杂对象    
  (gdb)   print   *table_start    
  $8={e=reference=’/000’,location=0x0,next=0x0}    
  l   值的历史成分    
  (gdb)print   $1   ($1为历史记录变量,在以后可以直接引用   $1   的值)    
  l   人为数组    
  人为数组提供了一种去显示存储器块（数组节或动态分配的存储区）内容的方法。早期的调试程序没有很好的方法将任意的指针换成一个数组。就像对待参数一样，让我们查看内存中在变量h后面的10个整数，一个动态数组的语法如下所示：    
  base@length    
  因此，要想显示在h后面的10个元素，可以使用h@10：    
  (gdb)print   h@10    
  $13=(-1,345,23,-234,0,0,0,98,345,10)    
    
  四：断点(breakpoint)    
  break命令（可以简写为b）可以用来在调试的程序中设置断点，该命令有如下四种形式：    
  l   break   line-number   使程序恰好在执行给定行之前停止。    
  l   break   function-name   使程序恰好在进入指定的函数之前停止。    
  l   break   line-or-function   if   condition   如果condition（条件）是真，程序到达指定行或函数时停止。    
  l   break   routine-name   在指定例程的入口处设置断点    
    
  如果该程序是由很多原文件构成的，你可以在各个原文件中设置断点，而不是在当前的原文件中设置断点，其方法如下：    
  (gdb)   break   filename:line-number    
  (gdb)   break   filename:function-name    
    
  要想设置一个条件断点，可以利用break   if命令，如下所示：    
  (gdb)   break   line-or-function   if   expr    
  例：    
  (gdb)   break   46   if   testsize==100    
    
  从断点继续运行：countinue   命令    
  五．断点的管理    
    
  1．   显示当前gdb的断点信息：    
  (gdb)   info   break    
  他会以如下的形式显示所有的断点信息：    
  Num   Type   Disp   Enb   Address   What    
  1   breakpoint   keep   y   0x000028bc   in   init_random   at   qsort2.c:155    
  2   breakpoint   keep   y   0x0000291c   in   init_organ   at   qsort2.c:168    
  (gdb)    
  2.删除指定的某个断点：    
  (gdb)   delete   breakpoint   1    
  该命令将会删除编号为1的断点，如果不带编号参数，将删除所有的断点    
  (gdb)   delete   breakpoint    
  3.禁止使用某个断点    
  (gdb)   disable   breakpoint   1    
  该命令将禁止断点   1,同时断点信息的   (Enb)域将变为   n    
  4．允许使用某个断点    
  (gdb)   enable   breakpoint   1    
  该命令将允许断点   1,同时断点信息的   (Enb)域将变为   y    
  5．清除原文件中某一代码行上的所有断点    
  (gdb)clean   number    
  注：number   为原文件的某个代码行的行号    
  六．变量的检查和赋值    
     whatis:识别数组或变量的类型    
     ptype:比whatis的功能更强，他可以提供一个结构的定义    
     set   variable:将值赋予变量    
     print   除了显示一个变量的值外，还可以用来赋值
七．单步执行    
     next    
  不进入的单步执行    
     step    
  进入的单步执行    
  如果已经进入了某函数，而想退出该函数返回到它的调用函数中，可使用命令finish    
  八．函数的调用    
    call   name   调用和执行一个函数    
  (gdb)   call   gen_and_sork(   1234,1,0   )    
  (gdb)   call   printf(“abcd”)    
  $1=4    
    finish   结束执行当前函数，显示其返回值（如果有的话）    
    
  九．机器语言工具    
  有一组专用的gdb变量可以用来检查和修改计算机的通用寄存器，gdb提供了目前每一台计算机中实际使用的4个寄存器的标准名字：    
     $pc   ：   程序计数器    
     $fp   ：   帧指针（当前堆栈帧）    
     $sp   ：   栈指针    
     $ps   ：   处理器状态    
    
  十．信号    
  gdb通常可以捕捉到发送给它的大多数信号，通过捕捉信号，它就可决定对于正在运行的进程要做些什么工作。例如，按CTRL-C将中断信号发送给gdb，通常就会终止gdb。但是你或许不想中断gdb，真正的目的是要中断gdb正在运行的程序，因此，gdb要抓住该信号并停止它正在运行的程序，这样就可以执行某些调试操作。    
    
  Handle命令可控制信号的处理，他有两个参数，一个是信号名，另一个是接受到信号时该作什么。几种可能的参数是：    
     nostop   接收到信号时，不要将它发送给程序，也不要停止程序。    
     stop   接受到信号时停止程序的执行，从而允许程序调试；显示一条表示已接受到信号的消息（禁止使用消息除外）    
     print   接受到信号时显示一条消息    
     noprint   接受到信号时不要显示消息（而且隐含着不停止程序运行）    
     pass   将信号发送给程序，从而允许你的程序去处理它、停止运行或采取别的动作。    
  l   nopass   停止程序运行，但不要将信号发送给程序。    
  例如，假定你截获SIGPIPE信号，以防止正在调试的程序接受到该信号，而且只要该信号一到达，就要求该程序停止，并通知你。要完成这一任务，可利用如下命令：    
  (gdb)   handle   SIGPIPE   stop   print    
  请注意，UNIX的信号名总是采用大写字母！你可以用信号编号替代信号名    
  如果你的程序要执行任何信号处理操作，就需要能够测试其信号处理程序，为此，就需要一种能将信号发送给程序的简便方法，这就是signal命令的任务。该   命令的参数是一个数字或者一个名字，如SIGINT。假定你的程序已将一个专用的SIGINT（键盘输入，或CTRL-C；信号2）信号处理程序设置成采   取某个清理动作，要想测试该信号处理程序，你可以设置一个断点并使用如下命令：    
  （gdb）   signal   2    
  continuing   with   signal   SIGINT(2)    
  该程序继续执行，但是立即传输该信号，而且处理程序开始运行.    
    
  十一.   原文件的搜索    
  search   text:该命令可显示在当前文件中包含text串的下一行。    
  Reverse-search   text:该命令可以显示包含text   的前一行。    
    
  十二.UNIX接口    
  shell   命令可启动UNIX外壳，CTRL-D退出外壳，返回到   gdb.    
    
  十三.命令的历史    
  为了允许使用历史命令，可使用   set   history   expansion   on   命令    
  (gdb)   set   history   expansion   on    
    
  小结：常用的gdb命令    
  backtrace   显示程序中的当前位置和表示如何到达当前位置的栈跟踪（同义词：where）    
  breakpoint   在程序中设置一个断点    
  cd   改变当前工作目录    
  clear   删除刚才停止处的断点    
  commands   命中断点时，列出将要执行的命令    
  continue   从断点开始继续执行    
  delete   删除一个断点或监测点；也可与其他命令一起使用    
  display   程序停止时显示变量和表达时    
  down   下移栈帧，使得另一个函数成为当前函数    
  frame   选择下一条continue命令的帧    
  info   显示与该程序有关的各种信息    
  jump   在源程序中的另一点开始运行    
  kill   异常终止在gdb   控制下运行的程序    
  list   列出相应于正在执行的程序的原文件内容    
  next   执行下一个源程序行，从而执行其整体中的一个函数    
  print   显示变量或表达式的值    
  pwd   显示当前工作目录    
  pype   显示一个数据结构（如一个结构或C++类）的内容    
  quit   退出gdb    
  reverse-search   在源文件中反向搜索正规表达式    
  run   执行该程序    
  search   在源文件中搜索正规表达式    
  set   variable   给变量赋值    
  signal   将一个信号发送到正在运行的进程    
  step   执行下一个源程序行，必要时进入下一个函数    
  undisplay   display命令的反命令，不要显示表达式    
  until   结束当前循环    
  up   上移栈帧，使另一函数成为当前函数    
  watch   在程序中设置一个监测点（即数据断点）    
  whatis   显示变量或函数类型     

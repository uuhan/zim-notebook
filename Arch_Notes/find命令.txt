Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-12-14T21:06:38+08:00

====== find命令 ======
Created 星期五 14 十二月 2012



没有什么能比得上探索和发现新的人、地方、事物所带来的刺激。领域可能有所不同，但有些原则却是一样的。在这些原则中，有一条是记录下您的旅程，另一条则是了解和使用工具。

UNIX® 操作系统很像一片广阔的、未经标识的荒野。当您在这样的领域中旅行时，可以选择一些日后能够给您带来帮助的工具。find 命令便是这样一种工具。find 命令不仅能够简单地用来定位文件，正如本文将介绍的那样，它还可以自动地执行其他 UNIX 命令的序列，其中使用所查找到的文件名作为输入。

Find 的有关限制

所有称职的操作系统都具有协助您查找相关内容的工具。与大多数工具不同的是，UNIX 中的 find 命令可以自动地对其查找到的文件执行许多操作。

图形用户界面 (GUI) 中的标准 find 工具允许您对所查找到的文件进行一些常规操作任务：您可以将它们标记为剪切、复制和粘贴，您可以将它们移动到一个新的位置，并且可以使用创建它们的应用程序来打开它们。这些操作涉及到两个或更多的步骤，并且不是自动完成的，即首先查找到文件，然后使用 GUI 为下一步的操作对它们进行标记。这种方法对许多用户来说没有问题，但是 Explorer 需要的不仅是这些。

UNIX 的 find 命令可以删除、复制、移动和执行其查找到的文件。另外，使用 -exec 参数可以根据您所需要的 UNIX 命令的序列来自动地运行这些文件。它甚至可以在对任何文件执行这些操作前，进一步让您进行确认。

简化文件系统的管理

与大多数 UNIX 命令一样，UNIX find 命令具有一长串令人生畏的选项和开关，它们会阻碍人们深入地学习该命令，但正是因为其范围广阔，真正的 Explorer 并不会被它们吓倒。一条好的通用原则在简化一个复杂问题时都会经过漫长的过程。启动一个 xterm，并尝试执行下面的命令：

$ find . -name *.gif -exec ls {} \;


-exec 参数中包含了真正有价值的操作。当查找到匹配搜索条件的文件时，-exec 参数定义了将对这些文件进行什么操作。该示例告诉计算机进行如下操作：

    从当前文件夹开始往下搜索，紧跟在 find 之后，使用点号 (.)。
    定位所有名称以 .gif 结尾的文件（图形文件）。
    列出所有查找到的文件，使用 ls 命令。

需要对 -exec 参数进行更深入地研究。当查找到匹配搜索条件的文件名时，find 命令执行 ls {} 字符串，用文件名和路径代替文本 {}。假设在搜索中查找到 saturn.gif 文件，find 将执行如下所示的命令：

$ ls ./gif_files/space/solar_system/saturn.gif


本文余下的内容建立在这条一般原则之上：仔细地使用 find 命令可以让 UNIX 文件系统的管理工作变得更加容易。例如，如果您使用了 -fstype 参数，find 命令可以根据查找到的文件所处的文件系统的类型来对命令进行相应的处理。在 find 命令对查找到的文件执行相应命令前将对您进行提示，这通常是非常有用的，您可以使用 -ok 参数告诉它继续执行该操作，接下来我们将对其进行介绍。

可选的执行

-ok 是 -exec 参数的一个重要的替代项，它的行为和 -exec 一样，但它会提示您是否要对文件运行相应的命令。假设您想要删除 home 目录中的大部分 .txt 文件，但希望能够逐个文件地执行该操作。像 UNIX 中的 rm 命令那样的删除操作是很危险的，因为当使用像 find 这样的自动化处理方式来查找文件时，它可能一不小心会删除重要的文件，您也许希望在删除这些系统查找到的文件之前对其进行仔细检查。

下面的命令列出了您的 home 目录中所有的 .txt 文件。要删除这些文件，必须在 find 命令通过列出文件名提示您确认操作时输入 Y 或者 y：

$ find $HOME/. -name *.txt -ok rm {} \;


它列出了查找到的每个文件，并且系统将暂停以等待您输入 Y 或者 y。如果您按下 Enter 键，系统将不会删除该文件。清单 1 显示了一些示例结果：

清单 1. 示例结果


< rm ... /home/bill/./.kde/share/apps/karm/karmdata.txt > ?
< rm ... /home/bill/./archives/LDDS.txt > ?
< rm ... /home/bill/./www/txt/textfile1.txt > ?
< rm ... /home/bill/./www/txt/faq.txt > ?
< rm ... /home/bill/./www/programs/MIKE.txt > ?
< rm ... /home/bill/./www/programs/EESTRING.txt > ?
.
.
.


系统将在每个问号之后暂停，在本示例中，每次都按下了 Enter 键以继续处理下一个文件。（没有删除任何文件。）-ok 参数允许您控制每个查找到的文件的自动化处理过程，这样就添加了一种避免自动删除文件的安全措施。

如果在使用 -ok 参数时涉及到过多的文件，那么一个好的方法是先运行带 -exec 的 find 命令以列出所有将要删除的文件，然后在经过检查确保其中不会删除重要的文件后，再次运行该命令，其中用 rm 代替 ls。

-exec 和 -ok 都非常有用，您必须确定在当前情况下哪一个能够更好的工作。请记住，安全第一！

创造性地使用 find

您可以使用 find 命令执行各种各样的任务。本部分内容提供了使用 find 命令来管理文件系统的几种方式的示例。

为了保持简单，这些示例都避免了使用涉及通过管道将一个命令的输出传递到另一个命令的 -exec 命令。然而，您完全可以根据自己需要在 find 命令的 -exec 子句中使用这样的命令。

清除临时文件

您可以使用 find 命令来清除目录或子目录中在正常使用过程中生成的临时文件，这样可以节省磁盘空间。要实现该操作，请使用下面的命令：

$ find . \( -name a.out -o -name '*.o' -o -name 'core' \) -exec rm {} \;


括号中的文件掩码 标识出了需要删除的文件类型，每个文件掩码的前面都有 -name。该列表可以扩展为包括您需要清除的系统中的任何临时文件类型。在代码的编译和连接过程中，程序员及其工具会生成示例中的那些文件类型：a.out、*.o 和 core。其他的用户通常也会生成类似的临时文件，可以使用如 *.tmp、*.junk 等文件掩码来对命令进行相应的编辑。您可能还发现将命令放入一个称作 clean 的脚本中非常有用，当需要清除一个目录中的内容的时候就可以执行该脚本。

复制目录中的内容

find 命令允许您复制目录中的全部内容，同时保持每个文件和子目录的权限、时间和所有权。要完成该操作，需要组合使用 find 和 cpio 命令，如下所示：

清单 2. 组合使用 find 和 cpio 命令



$ cd /path/to/source/dir

$ find . | cpio -pdumv /path/to/destination/dir


cpio 命令是一个复制命令，它设计用来将文件复制到或复制出一个 cpio 或 tar 存档文件，并自动地保持文件和子目录的权限、时间和所有权。

列出文本文件的第一行内容

有些人使用每个文本文件的第一行作为标题或者文件内容的描述。可以使用列出文件名和所有文本文件第一行内容的报表更方便地对大量的文本文件进行筛选。下面的命令在报表中列出了您的 home 目录中所有文本文件的第一行内容，便于进一步地根据需要使用 less 命令进行检查：

清单 3. less 命令



$ find $HOME/. -name *.txt -exec head -n 1 -v {} \; > report.txt

$ less < report.txt


维护 LOG 和 TMP 文件的存储空间

要为生成大量文件的应用程序维护 LOG 和 TMP 文件存储空间，可以将下列命令放入到每天运行的 cron 任务中：

清单 4. 维护 LOG 和 TMP 文件存储空间



$ find $LOGDIR -type d -mtime +0 -exec compress -r {} \;

$ find $LOGDIR -type d -mtime +5 -exec rm -f {} \;


第一个命令找到 $LOGDIR 目录中所有包含在 24 小时内 (-mtime +0) 进行了修改的数据的目录 (-type d)，并对它们进行压缩 (compress -r {}) 以节省磁盘空间。如果这些目录超过了一个工作周 (-mtime +5)，第二个命令则将其删除 (rm -f {})，以便增加磁盘上的可用空间。通过这种方式，cron 任务自动地根据您所指定的时间窗口对目录进行维护。

复制复杂的目录树

如果您想要将复杂的目录树从一台计算机复制到另一台计算机，同时保持副本权限以及 User ID 和 Group ID（UID 和 GID——操作系统所使用的标记文件的所有权的数值），并且不复制用户文件，那么就需要再次使用 find 和 cpio：

清单 5. 复制复杂的目录树


$ cd /source/directory

$ find . -depth -print | cpio -o -O /target/directory


查找不指向任何地方的链接

要查找不指向任何地方的链接，可以使用带 find 的 perl 解释器，如下所示：

$ find / -type l -print | perl -nle '-e || print';


该命令从最顶层目录 (/) 开始，列出由 perl 解释器确定不指向任何地方 (-nle '-e || print') 的所有链接 (-type l -print)，关于 Unix Guru Universe 站点中这个技巧的更详细的信息，请参阅参考资料部分。如果您想要删除这些文件，可以进一步使用管道将输出传递到 rm -f {} 命令。当然，Perl 可以在大多数的 UNIX 工具包中找到，它是许多功能强大的解释性语言工具中的一种。

定位和重命名无法打印的目录

在 UNIX 中，可能会有错误的或恶意的程序创建包含无法打印的字符的目录。定位和重命名这些目录，这样就可以更容易地检查并删除它们。要完成该操作，您首先需要在 ls 中包含 -i 开关，以获取该目录的索引节点的数值。然后，使用 find 将索引节点的数值转换为一个可以使用 mv 命令进行重命名的文件名：

清单 6. 定位和重命名无法打印的目录


$ ls -ail

$ find . -inum 211028 -exec mv {} newname.dir \;


列出长度为零的文件

要列出所有长度为零的文件，请使用下面的命令：

$ find . -empty -exec ls {} \;


在查找到空文件之后，您可以选择用 rm 命令来代替 ls 命令，以删除这些文件。

很明显，您对 UNIX find 命令的使用受到知识和创造性的限制。

结束语

使用 find 命令，可以轻松地浏览 UNIX 文件系统中丰富的内容。很值得花时间来试验该命令，并了解它能为您做些什么。正如本文中所列出的示例，您可以通过许多创造性的方式来使用 find，这样可以轻松地浏览和管理文件系统，并且充满乐趣。
find命令详细用法
http://www.chinaunix.net 作者:sdccf  发表于：2004-01-09 10:46:20

名称 : find
用法 : find     
使用说明 : 
将档案系统内符合 expression 的档案列出来。你可以指要档案的名称、类别、时间、大小、
权限等不同资讯的组合，只有完全相符的才会被列出来。
find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path
，之后的是  expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用
 -print 为预设  expression。
expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。
-mount, -xdev : 只检查和指定目录在同一个档案系统下的档案，避免列出其它档案系统中的档案 
-amin n : 在过去 n 分钟内被读取过
-anewer file : 比档案 file 更晚被读取过的档案
-atime n : 在过去 n 天过读取过的档案 
-cmin n : 在过去 n 分钟内被修改过 
-cnewer file :比档案 file 更新的档案
-ctime n : 在过去 n 天过修改过的档案 
-empty : 空的档案-gid n or -group name : gid 是 n 或是 group 名称是 name 
-ipath p, -path p : 路径名称符合 p 的档案，ipath 会忽略大小写
-name name, -iname name : 档案名称符合 name 的档案。iname 会忽略大小写
-size n : 档案大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w
 是二个位元组。-type c : 档案类型是 c 的档案。
d: 目录
c: 字型装置档案
b: 区块装置档案
p: 具名贮列
f: 一般档案
l: 符号连结
s: socket
-pid n : process id 是 n 的档案
你可以使用 ( ) 将运算式分隔，并使用下列运算。
exp1 -and exp2
! expr
-not expr
exp1 -or exp2
exp1, exp2
范例: 
将目前目录及其子目录下所有延伸档名是 c 的档案列出来。
# find . -name "*.c" 
将目前目录其其下子目录中所有一般档案列出
# find . -ftype f 
将目前目录及其子目录下所有最近 20 分钟内更新过的档案列出
# find . -ctime -20 
find . -name "*" -exec grep xxx {} ; -print |morexxx为你想要找的字符串

 

ls *.zip | xargs -n1 unzip

使用find和xargs[转摘自《shell编程和unix命令》]

使用find和xargs
有时可能需要在系统中查找具有某一特征的文件(例如文件权限、文件属主、文件长度、
文件类型等等)。这样做可能有很多原因。可能出于安全性的考虑，或是一般性的系统管理任
务，或许只是为了找出一个不知保存在什么地方的文件。F i n d是一个非常有效的工具，它可
以遍历当前目录甚至于整个文件系统来查找某些文件或目录。
在本章中，我们介绍以下内容：
• find命令选项。
• 使用f i n d命令不同选项的例子。
• 配合f i n d使用x a rg s命令的例子。
由于f i n d具有如此强大的功能，所以它的选项也很多，其中大部分选项都值得我们花时间
来了解一下。即使系统中含有网络文件系统( N F S )，f i n d命令在该文件系统中同样有效，只要
你具有相应的权限。
在运行一个非常消耗资源的f i n d命令时，很多人都倾向于把它放在后台执行，因为遍历一
个大的文件系统可能会花费很长的时间(这里是指3 0 G字节以上的文件系统)。
F i n d命令的一般形式为：
find pathname -options [-print -exec -ok]
让我们来看看该命令的参数：
pathname find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。
-print find命令将匹配的文件输出到标准输出。
-exec find命令对匹配的文件执行该参数所给出的s h e l l命令。相应命令的形式为' c o m m -
and' {} \;，注意{ }和\；之间的空格。
-ok 和- e x e c的作用相同，只不过以一种更为安全的模式来执行该参数所给出的s h e l l命令，
在执行每一个命令之前，都会给出提示，让用户来确定是否执行。
find命令选项
f i n d命令有很多选项或表达式，每一个选项前面跟随一个横杠-。让我们先来看一下该命
令的主要选项，然后再给出一些例子。
-name 按照文件名查找文件。
-perm 按照文件权限来查找文件。
-prune 使用这一选项可以使f i n d命令不在当前指定的目录中查找，如果同时使用了- d e p t h
选项，那么- p r u n e选项将被f i n d命令忽略。
-user 按照文件属主来查找文件。
-group 按照文件所属的组来查找文件。
-mtime -n +n 按照文件的更改时间来查找文件， - n表示文件更改时间距现在n天以内，+ n
表示文件更改时间距现在n天以前。F i n d命令还有- a t i m e和- c t i m e选项，但它们都和- m t i m e选项
相似，所以我们在这里只介绍- m t i m e选项。
-nogroup 查找无有效所属组的文件，即该文件所属的组在/ e t c / g r o u p s中不存在。
-nouser 查找无有效属主的文件，即该文件的属主在/ e t c / p a s s w d中不存在。
-newer file1 ! file2 查找更改时间比文件f i l e 1新但比文件f i l e 2旧的文件。
-type 查找某一类型的文件，诸如：
b - 块设备文件。
d - 目录。
c - 字符设备文件。
p - 管道文件。
l - 符号链接文件。
f - 普通文件。
-size n[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。
-depth 在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。
-fstype 查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件
/ e t c / f s t a b中找到，该配置文件中包含了本系统中有关文件系统的信息。
-mount 在查找文件时不跨越文件系统m o u n t点。
-follow 如果f i n d命令遇到符号链接文件，就跟踪至链接所指向的文件。
-cpio 对匹配的文件使用c p i o命令，将这些文件备份到磁带设备中。
使用name选项
文件名选项是f i n d命令最常用的选项，要么单独使用该选项，要么和其他选项一起使用。
可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来。
不管当前路径是什么，如果想要在自己的根目录$ H O M E中查找文件名符合* . t x t的文件，
使用~作为' p a t h n a m e参数，波浪号~代表了你的$ H O M E目录。
$ find ~ -name "*.txt" -print
想要在当前目录及子目录中查找所有的‘ * . t x t’文件，可以用：
$ find . -name "*.txt" -print
想要的当前目录及子目录中查找文件名以一个大写字母开头的文件，可以用：
$ find . -name "[A-Z]*" -print
想要在/ e t c目录中查找文件名以h o s t开头的文件，可以用：
$ find /etc -name "host*" -print
想要查找$ H O M E目录中的文件，可以用：
$ find ~ -name "*" -print 或find . -print
要想让系统高负荷运行，就从根目录开始查找所有的文件。如果希望在系统管理员那里
保留一个好印象的话，最好在这么做之前考虑清楚！
$ find / -name "*" -print
如果想在当前目录查找文件名以两个小写字母开头，跟着是两个数字，最后是* . t x t的文
件，下面的命令就能够返回名为a x 3 7 . t x t的文件：

$ find . -name "[a-z][a-z][0--9][0--9].txt" -print
使用perm选项
如果希望按照文件权限模式来查找文件的话，可以采用- p e r m选项。你可能需要找到所有
用户都具有执行权限的文件，或是希望查看某个用户目录下的文件权限类型。在使用这一选
项的时候，最好使用八进制的权限表示法。
为了在当前目录下查找文件权限位为7 5 5的文件，即文件属主可以读、写、执行，其他用
户可以读、执行的文件，可以用：
$ find . -perm 755 -print
如果希望在当前目录下查找所有用户都可读、写、执行的文件（要小心这种情况），我们
可以使用f i n d命令的- p e r m选项。在八进制数字前面要加一个横杠-。在下面的命令中- p e r m代
表按照文件权限查找，而‘ 0 0 7’和你在c h m o d命令的绝对模式中所采用的表示法完全相同。
$ find . -perm -007 -print
忽略某个目录
如果在查找文件时希望忽略某个目录，因为你知道那个目录中没有你所要查找的文件，
那么可以使用- p r u n e选项来指出需要忽略的目录。在使用- p r u n e选项时要当心，因为如果你同
时使用了- d e p t h选项，那么- p r u n e选项就会被f i n d命令忽略。
如果希望在/ a p p s目录下查找文件，但不希望在/ a p p s / b i n目录下查找，可以用：
$ find /apps -name "/apps/bin" -prune -o -print
2.1.4 使用user和nouser选项
如果希望按照文件属主查找文件，可以给出相应的用户名。例如，在$ H O M E目录中查找
文件属主为d a v e的文件，可以用：
$ find ~ -user dave -print
在/ e t c目录下查找文件属主为u u c p的文件：
$ find /etc -user uucp -print
为了查找属主帐户已经被删除的文件，可以使用- n o u s e r选项。这样就能够找到那些属主
在/ e t c / p a s s w d文件中没有有效帐户的文件。在使用- n o u s e r选项时，不必给出用户名； f i n d命令
能够为你完成相应的工作。例如，希望在/ h o m e目录下查找所有的这类文件，可以用：
$ find /home -nouser -print
使用group和nogroup选项
就像u s e r和n o u s e r选项一样，针对文件所属于的用户组， f i n d命令也具有同样的选项，为
了在/ a p p s目录下查找属于a c c t s用户组的文件，可以用：
$ find /apps -group accts -print
要查找没有有效所属用户组的所有文件，可以使用n o g r o u p选项。下面的f i n d命令从文件
系统的根目录处查找这样的文件
$ fine/-nogroup-print
按照更改时间查找文件
如果希望按照更改时间来查找文件，可以使用m t i m e选项。如果系统突然没有可用空间了，
很有可能某一个文件的长度在此期间增长迅速，这时就可以用m t i m e选项来查找这样的文件。
用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的
文件。
希望在系统根目录下查找更改时间在5日以内的文件，可以用：
$ find / -mtime -5 -print
为了在/ v a r / a d m目录下查找更改时间在3日以前的文件，可以用：
$ find /var/adm -mtime +3 -print
查找比某个文件新或旧的文件
如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用- n e w e r选
项。它的一般形式为：
newest_file_name ! oldest_file_name
其中，！是逻辑非符号。
这里有两个文件，它们的更改时间大约相差两天。
下面给出的f i n d命令能够查找更改时间比文件a g e . a w k新但比文件b e l t s . a w k旧的文件：
如果想使用f i n d命令的这一选项来查找更改时间在两个小时以内的文件，除非有一个现成
的文件其更改时间恰好在两个小时以前，否则就没有可用来比较更改时间的文件。为了解决
这一问题，可以首先创建一个文件并将其日期和时间戳设置为所需要的时间。这可以用t o u c h
命令来实现。
假设现在的时间是2 3 : 4 0，希望查找更改时间在两个小时以内的文件，可以首先创建这样
一个文件：
一个符合要求的文件已经被创建；这里我们假设今天是五月四日，而该文件的更改时间
是2 1 : 4 0，比现在刚好早两个小时。
现在我们就可以使用f i n d命令的- n e w e r选项在当前目录下查找所有更改时间在两个小时以
内的文件：
$ find . -newer dstamp -print
使用type选项
U N I X或L I N U X系统中有若干种不同的文件类型，这部分内容我们在前面的章节已经做了

介绍，这里就不再赘述。如果要在/ e t c目录下查找所有的目录，可以用：
$ find /etc -type d -print
为了在当前目录下查找除目录以外的所有类型的文件，可以用：
$ find . ! -type d -print
为了在/ e t c目录下查找所有的符号链接文件，可以用：
$ find /etc -type l -print
2.1.9 使用size选项
可以按照文件长度来查找文件，这里所指的文件长度既可以用块（ b l o c k）来计量，也可
以用字节来计量。以字节计量文件长度的表达形式为N c；以块计量文件长度只用数字表示即
可。
就我个人而言，我总是使用以字节计的方式，在按照文件长度查找文件时，大多数人都
喜欢使用这种以字节表示的文件长度，而不用块的数目来表示，除非是在查看文件系统的大
小，因为这时使用块来计量更容易转换。
为了在当前目录下查找文件长度大于1 M字节的文件，可以用：
$ find . -size +1000000c -print
为了在/ h o m e / a p a c h e目录下查找文件长度恰好为1 0 0字节的文件，可以用：
$ find /home/apache -size 100c -print
为了在当前目录下查找长度超过1 0块的文件（一块等于5 1 2字节），可以用：
$ find . -size +10 -print
使用depth选项
在使用f i n d命令时，可能希望先匹配所有的文件，再在子目录中查找。使用d e p t h选项就
可以使f i n d命令这样做。这样做的一个原因就是，当在使用f i n d命令向磁带上备份文件系统时，
希望首先备份所有的文件，其次再备份子目录中的文件。
在下面的例子中， f i n d命令从文件系统的根目录开始，查找一个名为C O N . F I L E的文件。
它将首先匹配所有的文件然后再进入子目录中查找。
$ find / -name "CON.FILE" -depth -print
使用mount选项
在当前的文件系统中查找文件（不进入其他文件系统），可以使用f i n d命令的m o u n t选项。
在下面的例子中，我们从当前目录开始查找位于本文件系统中文件名以X C结尾的文件：
$ find . -name "*.XC" -mount -print
使用cpio选项
c p i o命令可以用来向磁带设备备份文件或从中恢复文件。可以使用f i n d命令在整个文件系
统中（更多的情况下是在部分文件系统中）查找文件，然后用c p i o命令将其备份到磁带上。
如果希望使用c p i o命令备份/ e t c、/ h o m e和/ a p p s目录中的文件，可以使用下面所给出的命
令，不过要记住你是在文件系统的根目录下：

（在上面的例子中，第一行末尾的\告诉s h e l l命令还未结束，忽略\后面的回车。）
在上面的例子中，应当注意到路径中缺少/。这叫作相对路径。之所以使用相对路径，是
因为在从磁带中恢复这些文件的时候，可以选择恢复文件的路径。例如，可以将这些文件先
恢复到另外一个目录中，对它们进行某些操作后，再恢复到原始目录中。如果在备份时使用
了绝对路径，例如/ e t c，那么在恢复时，就只能恢复到/ e t c目录中去，别无其他选择。在上面
的例子中，我告诉f i n d命令首先进入/ e t c目录，然后是/ h o m e和/ a p p s目录，先匹配这些目录下
的文件，然后再匹配其子目录中的文件，所有这些结果将通过管道传递给c p i o命令进行备份。
顺便说一下，在上面的例子中c p i o命令使用了C 6 5 5 3 6选项，我本可以使用B选项，不过这
样每块的大小只有5 1 2 字节，而使用了C 6 5 5 3 6 选项后，块的大小变成了6 4 K 字节
（6 5 5 3 6 / 1 0 2 4）。
使用exec或ok来执行shell命令
当匹配到一些文件以后，可能希望对其进行某些操作，这时就可以使用- e x e c选项。一旦
f i n d命令匹配到了相应的文件，就可以用- e x e c选项中的命令对其进行操作（在有些操作系统
中只允许- e x e c选项执行诸如l s或ls -l这样的命令）。大多数用户使用这一选项是为了查找旧文
件并删除它们。这里我强烈地建议你在真正执行r m命令删除文件之前，最好先用l s命令看一
下，确认它们是所要删除的文件。
e x e c选项后面跟随着所要执行的命令，然后是一对儿{ }，一个空格和一个\，最后是一个
分号。
为了使用e x e c选项，必须要同时使用p r i n t选项。如果验证一下f i n d命令，会发现该命令只
输出从当前路径起的相对路径及文件名。
为了用ls -l命令列出所匹配到的文件，可以把ls -l命令放在f i n d命令的- e x e c选项中，例如：
上面的例子中，f i n d命令匹配到了当前目录下的所有普通文件，并在- e x e c选项中使用ls -l
命令将它们列出。
为了在/ l o g s目录中查找更改时间在5日以前的文件并删除它们，可以用：
$ find logs -type f -mtime +5 -exec rm {} \;
记住，在s h e l l中用任何方式删除文件之前，应当先查看相应的文件，一定要小心！
当使用诸如m v或r m命令时，可以使用- e x e c选项的安全模式。它将在对每个匹配到的文件
进行操作之前提示你。在下面的例子中， f i n d命令在当前目录中查找所有文件名以. L O G结尾、
更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。
按y键删除文件，按n键不删除。
任何形式的命令都可以在- e x e c选项中使用。在下面的例子中我们使用g r e p命令。f i n d命令

首先匹配所有文件名为“ p a s s w d *”的文件，例如p a s s w d、p a s s w d . o l d、p a s s w d . b a k，然后执
行g r e p命令看看在这些文件中是否存在一个r o u n d e r用户。
find命令的例子
我们已经介绍了f i n d命令的基本选项，下面给出f i n d命令的一些其他的例子。
为了匹配$ H O M E目录下的所有文件，下面两种方法都可以使用：
$ find $HOME -print
$ find ~ -print
为了在当前目录中查找s u i d置位，文件属主具有读、写、执行权限，并且文件所属组的用
户和其他用户具有读和执行的权限的文件，可以用：
$ find . -type f -perm 4755 -print
为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径，可以用：
$ find / -type f -size 0 -exec ls -l {} \;
为了查找/ v a r / l o g s目录中更改时间在7日以前的普通文件，并删除它们，可以用：
$ find /var/logs -type f -mtime +7 -exec rm {} \;
为了查找系统中所有属于a u d i t组的文件，可以用：
$find /-name -group audit -print
我们的一个审计系统每天创建一个审计日志文件。日志文件名的最后含有数字，这样我
们一眼就可以看出哪个文件是最新的，哪个是最旧的。A d m i n . l o g 文件编上了序号：
a d m i n . l o g . 0 0 1、a d m i n . l o g . 0 0 2等等。下面的f i n d命令将删除/ l o g s目录中访问时间在7日以前、
含有数字后缀的a d m i n . l o g文件。该命令只检查三位数字，所以相应日志文件的后缀不要超过
9 9 9。
$ find /logs -name 'admin.log[0-9][0-9][0-9] '-atime +7 -exec rm {} \;
为了查找当前文件系统中的所有目录并排序，可以用：
$ find . -type d -print -local -mount |sort
为了查找系统中所有的r m t磁带设备，可以用：
$ find /dev/rmt -print
xargs
在使用f i n d命令的- e x e c选项处理匹配到的文件时， f i n d命令将所有匹配到的文件一起传递
给e x e c执行。不幸的是，有些系统对能够传递给e x e c的命令长度有限制，这样在f i n d命令运行
几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是
x a rg s命令的用处所在，特别是与f i n d命令一起使用。F i n d命令把匹配到的文件传递给x a rg s命
令，而x a rg s命令每次只获取一部分文件而不是全部，不像- e x e c选项那样。这样它可以先处理
最先获取的一部分文件，然后是下一批，并如此继续下去。在有些系统中，使用- e x e c选项会
为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次
执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高；而使用

x a rg s命令则只有一个进程。另外，在使用x a rg s命令时，究竟是一次获取所有的参数，还是分
批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参
数来确定。
让我们来看看x a rg s命令是如何同f i n d命令一起使用的，并给出一些例子。
下面的例子查找系统中的每一个普通文件，然后使用x a rg s命令来测试它们分别属于哪类
文件：
下面的例子在整个系统中查找内存信息转储文件(core dump) ，然后把结果保存到
/tmp/core.log 文件中：
$ find . -name "core" -print | xargs echo "" >/tmp/core.log
下面的例子在/ a p p s / a u d i t目录下查找所有用户具有读、写和执行权限的文件，并收回相应
的写权限：
$ find /apps/audit -perm -7 -print | xargs chmod o-w
在下面的例子中，我们用g r e p命令在所有的普通文件中搜索d e v i c e这个词：
$ find / -type f -print | xargs grep "device"
在下面的例子中，我们用g r e p命令在当前目录下的所有普通文件中搜索D B O这个词：
$ find . -name \ ＊-type f -print | xargs grep "DBO"
注意，在上面的例子中， \用来取消f i n d命令中的*在s h e l l中的特殊含义。
小结
f i n d命令是一个非常优秀的工具，它可以按照用户指定的准则来匹配文件。使用e x e c和
x a rg s可以使用户对所匹配到的文件执行几乎所有的命令。


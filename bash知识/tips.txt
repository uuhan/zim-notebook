Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-02-16T01:31:14+08:00

====== tips ======
Created 星期六 16 二月 2013

下面这几条是我自己在写shell代码的时候，比较喜欢的几种写法，抛砖引玉。

1) 检查命令执行是否成功

第一种写法，比较常见：
1
2
3
4
5
6
7
	
echo abcdee | grep -q abcd
 
if [ $? -eq 0 ]; then
    echo "Found"
else
    echo "Not found"
fi

简洁的写法：
1
2
3
4
5
	
if echo abcdee | grep -q abc; then
    echo "Found"
else
    echo "Not found"
fi

当然你也可以不要if/else,不过这样可读性比较差:
1
2
3
	
[Sun Nov 04 05:58 AM] [kodango@devops] ~/workspace
$ echo abcdee | grep -q abc && echo "Found" || echo "Not found"
Found

简洁的Bash编程技巧

2) 将标准输出与标准错误输出重定向到/dev/null 第一种写法，比较常见：
1
	
grep "abc" test.txt 1>/dev/null 2>&1

常见的错误写法：
1
	
grep "abc" test.txt 2>&1 1>/dev/null

简洁的写法：
1
	
grep "abc" test.txt &> /dev/null

3) awk的使用

举一个实际的例子，获取Xen DomU的id。

常见的写法：
1
	
sudo xm li | grep vm_name | awk '{print $2}'

简洁的写法：
1
	
sudo xm li | awk '/vm_name/{print $2}'

4) 将一个文本的所有行用逗号连接起来

假设文件内容如下所示:
1
2
3
4
5
	
[Sat Nov 03 10:04 PM] [kodango@devops] ~/workspace
$ cat /tmp/test.txt
1
2
3

使用Sed命令：
1
2
3
	
[Sat Nov 03 10:14 PM] [kodango@devops] ~/workspace
$ sed ':a;$!N;s/\n/,/;ta' /tmp/test.txt
1,2,3

简洁的写法：
1
2
3
	
[Sat Nov 03 10:04 PM] [kodango@devops] ~/workspace
$ paste -sd, /tmp/test.txt
1,2,3

5) 过滤重复行

假设文件内容如下所示：
1
2
3
4
5
6
	
[Sat Nov 03 10:16 PM] [kodango@devops] ~/workspace
$ sort /tmp/test.txt
1
1
2
3

常用的方法：
1
2
3
4
5
	
[Sat Nov 03 10:16 PM] [kodango@devops] ~/workspace
$ sort /tmp/test.txt | uniq
1
2
3

简单的写法：
1
2
3
4
5
	
[Sat Nov 03 10:16 PM] [kodango@devops] ~/workspace
$ sort /tmp/test.txt -u
1
2
3

6) grep查找单词

假设一个文本的每一行是一个ip地址，例如
1
2
3
4
5
	
[Sat Nov 03 10:20 PM] [kodango@devops] ~/workspace
$ cat /tmp/ip.list
10.0.0.1
10.0.0.12
10.0.0.123

使用grep查找是否包括10.0.0.1这个ip地址。常见的写法：
1
2
3
	
[Sat Nov 03 10:22 PM] [kodango@devops] ~/workspace
$ grep '10.0.0.1\>' /tmp/ip.list
10.0.0.1

简单的方法（其实这方法不见得简单，只是为了说明-w这个参数还是很有用的)
1
2
3
	
[Sat Nov 03 10:23 PM] [kodango@devops] ~/workspace
$ grep -w '10.0.0.1' /tmp/ip.list
10.0.0.1

顺便grep的-n/-H/-v/-f/-c这几参数都很有用。

7) 临时设置环境变量

常见的写法：
1
2
3
4
5
6
	
[Sat Nov 03 10:26 PM] [kodango@devops] ~/workspace
$ export LC_ALL=zh_CN.UTF-8
 
[六 11月 03 10:26 下午] [kodango@devops] ~/workspace
$ date
2012年 11月 03日 星期六 22:26:55 CST

简洁的写法:
1
2
3
4
5
6
	
[六 11月 03 10:26 下午] [kodango@devops] ~/workspace
$ unset LC_ALL
 
[Sat Nov 03 10:27 PM] [kodango@devops] ~/workspace
$ LC_ALL=zh_CN.UTF-8 date
2012年 11月 03日 星期六 22:27:43 CST

在命令之前加上环境变更的设置，只是临时改变当前执行命令的环境。

8) $1,$2…等位置参数的使用

假设只想使用$2,$3..这几个参数，常见的做法是:
1
2
	
shift
echo "$@"

为什么不这样写呢？
1
	
echo "${@:2}"

9）退而求其次的写法

相信大家会有这种需求，当一个参数值没有提供时，可以使用默认值。常见的写法是：
1
2
3
4
5
	
arg=$1
 
if [ -z "$arg" ]; then
   arg=0
fi

简洁的写法是这样的:
1
	
arg=${1:-0}

10）bash特殊参数–的用法

假设要用grep查找字符串中是否包含-i，我们会这样尝试：
1
2
3
4
5
6
7
8
	
[Sat Nov 03 10:45 PM] [kodango@devops] ~/workspace
$ echo 'abc-i' | grep "-i"
Usage: grep [OPTION]... PATTERN [FILE]...
Try 'grep --help' for more information.
 
[Sat Nov 03 10:45 PM] [kodango@devops] ~/workspace
$ echo 'abc-i' | grep "\-i"
abc-i

简洁的方法是：
1
2
3
	
[Sat Nov 03 10:45 PM] [kodango@devops] ~/workspace
$ echo 'abc-i' | grep -- -i
abc-i

bash中–后面的参数不会被当作选项解析。

11）函数的返回值默认是最后一行语句的返回值
1
2
3
4
5
6
7
8
	
# Check whether an item is a function
# $1: the function name
# Return: 0(yes) or 1(no)
function is_function()
{
    local func_name=$1
    test "`type -t $1 2>/dev/null`" = "function"
}

不要画蛇添足再在后面加一行return $?了。

12) 将printf格式化的结果赋值给变量

例如将数字转换成其十六进制形式，常见的写法是：
1
2
	
[Sat Nov 03 10:55 PM] [kodango@devops] ~/workspace
$ var=$(printf '%%%02x' 111)

简单的写法是：
1
2
	
[Sat Nov 03 10:54 PM] [kodango@devops] ~/workspace
$ printf -v var '%%%02x' 111

看看printf的help
1
2
3
4
5
6
7
8
	
[Sat Nov 03 10:53 PM] [kodango@devops] ~/workspace
$ help printf | grep -A 1 -B 1 -- -v
printf: printf [-v var] format [arguments]
    Formats and prints ARGUMENTS under control of the FORMAT.
--
    Options:
      -v var    assign the output to shell variable VAR rather than
            display it on the standard output

13）打印文件行

打印文件的第一行：
1
	
head -1 test.txt

打印文件的第2行：
1
	
sed -n '2p' test.txt

打印文件的第2到5行：
1
	
sed -n '2,5p' test.txt

打印文件的第2行始（包括第2行在内）5行的内容：
1
	
sed -n '2,+4p' test.txt

打印倒数第二行：
1
2
	
$ tail -2 test.txt | head -1
$ tac test.txt | sed -n '2p'

14）善用let或者(())命令做算术运算

如何对一个数字做++运算，可能你会这样用：
1
2
	
a=1
a=`expr a + 1`

为何不用你熟悉的:
1
2
3
	
a=1
let a++
let a+=2

15）获取软连接指定的真实文件名

如果你不知道，你可能会这样获取：
1
2
3
	
[Sat Nov 03 11:12 PM] [kodango@devops] ~/workspace
$ ls -l /usr/bin/python | awk -F'->' '{print $2}' | tr -d ' '
/usr/bin/python2

如果你知道有一个叫readlink的命令，那么：
1
2
3
	
[Sat Nov 03 11:13 PM] [kodango@devops] ~/workspace
$ readlink /usr/bin/python
/usr/bin/python2

16）获取一个字符的ASCII码
1
2
3
4
5
6
	
[Sat Nov 03 11:14 PM] [kodango@devops] ~/workspace
$ printf '%02x' "'+"
2b
[Sat Nov 03 11:30 PM] [kodango@devops] ~/workspace
$ echo -n '+' | od -tx1 -An | tr -d ' '
2b

17）清空一个文件

常见的用法:
1
	
echo "" > test.txt

简单的写法：
1
	
> test.txt

18) 不要忘记有here document

下面一段代码：
1
2
3
4
5
6
	
grep -v 1 /tmp/test.txt | while read line; do
    let a++
    echo --$line--
done
 
echo a:$a

执行后有什么问题吗？
1
2
3
4
5
	
[Sun Nov 04 05:35 AM] [kodango@devops] ~/workspace
$ sh test.sh
--2--
--3--
a:

发现a这个变量没有被赋值，为什么呢？因为管道后面的代码是在在一个子shell中执行的，所做的任何更改都不会对当前shell有影响，自然a这个变量就不会有赋值了。

换一种思路，可以这样做：
1
2
3
4
5
6
7
8
9
	
grep -v 1 /tmp/test.txt > /tmp/test.tmp
 
while read line; do
    let a++
    echo --$line--
done < /tmp/test.tmp
 
echo a:$a
rm -f /tmp/test.tmp

不过多了一个临时文件，最后还要删除。这里其实可以用到here document：
1
2
3
4
5
6
7
8
9
	
b=1
while read line2; do
    let b++
    echo ??$line2??
done < < EOF
`grep -v 1 /tmp/test.txt`
EOF
 
echo b: $b

here document往往用于需要输出一大段文本的地方，例如脚本的help函数。

19）删除字符串中的第一个或者最后一个字符

假设字符串为：
1
2
	
[Sun Nov 04 10:21 AM] [kodango@devops] ~/workspace
$ str="aremoveb"

可能你第一个想法是通过sed或者其它命令来完成这个功能，但是其实有很简单的方法：
1
2
3
4
5
6
7
	
[Sun Nov 04 10:24 AM] [kodango@devops] ~/workspace
$ echo "${str#?}"
removeb
 
[Sun Nov 04 10:24 AM] [kodango@devops] ~/workspace
$ echo "${str%?}"
aremove

类似地，你也可以删除2个、3个、4个……

有没有一次性删除第一个和最后一个字符的方法呢？答案当然是肯定的：
1
2
3
	
[Sun Nov 04 10:26 AM] [kodango@devops] ~/workspace
$ echo "${str:1:-1}"
remove

关于这些变量替换的内容在bash的man手册中都有说明。

20）使用逗号join数组元素

假设数组元素没有空格，可以用这种方法：
1
2
3
4
5
6
7
	
[Sun Nov 04 10:14 AM] [kodango@devops] ~/workspace
$ a=(1 2 3)
$ b="${a[*]}"
 
[Sun Nov 04 10:15 AM] [kodango@devops] ~/workspace
$ echo ${b// /,}
1,2,3

假设数组元素包含有空格，可以借用printf命令来达到：
1
2
3
4
5
6
	
[Sun Nov 04 10:15 AM] [kodango@devops] ~/workspace
$ a=(1 "2 3" 4)
 
[Sun Nov 04 10:15 AM] [kodango@devops] ~/workspace
$ printf ",%s" "${a[@]}" | cut -c2-  
1,2 3,4

21) Shell中的多进程

在命令行下，我们会在命令行后面加上&符号来让该命令在后台执行，在shell脚本中，使用”(cmd)”可以让fork一个子shell来执行该命令。利用这两点，可以实现shell的多线程：
1
2
3
4
5
6
7
8
9
10
11
12
13
14
	
job_num=10
 
function do_work()
{
    echo "Do work.."
}
 
for ((i=0; i<job_num ;i++)); do
    echo "Fork job $i"
    (do_work) &
done
 
wait   # wait for all job done
echo "All job have been done!"

注意最后的wait命令，作用是等待所有子进程结束。

22） bash中alias的使用

alias其实是给常用的命令定一个别名，比如很多人会定义一下的一个别名：
1
	
alias ll='ls -l'

以后就可以使用ll，实际展开后执行的是ls -l。

现在很多发行版都会带几个默认的别名，比如：
1
2
3
	
alias grep='grep --color=auto'  # 带颜色显示
alias ls='ls --color=auto' # 同上
alias rm='rm -i'  # 删除文件需要确认

alias在某些方面确实提高了很大的效率，但是也是有隐患的，这点可以看我以前的一篇文章终端下肉眼看不见的东西。那么如何不要展开alias，而是用本来的意思呢？答案是使用转义：
1
2
	
\ls
\grep

在命令前面加一个反斜杠后就可以了。

这里要插一段故事，前两天我在shell脚本中定义了下面的一个alias，假设位于文件util.sh：
1
2
3
4
	
#!/bin/bash
...
alias ssh='ssh -o StrictHostKeyChecking=no -o LogLevel=quiet -o BatchMode=yes'
...

后面这串ssh选项是为了去掉一些warning的信息，不提示输入密码等等。具体可以看ssh的文档说明。我自己测试的时候好好的，当时我同事跑得时候却依然有报Warning。我对比了下我们两个人的用法：
1
2
	
sh util.sh  # 我的
./util.sh   # 他的

大家应该知道，直接./util.sh执行，shell会去找脚本第一行的shebang中给定的解释器去执行改脚本，所以第二种用法相当于直接用bash来执行。那想必是bash/sh对alias是否默认展开这一点上是有区别的了（可能是bash版本的问题，RHEL 5U4）。翻阅了下Bash的man手册，发现可以通过设置expand_aliases选项来打开alias展开的功能，默认在非交互式Shell下是关闭的（什么是交互式登录Shell）。

修改下util.sh，打开这个选项就Ok了：
1
2
3
4
5
6
	
#!/bin/bash
...
# Expand aliases in script
shopt -s expand_aliases
alias ssh='ssh -o StrictHostKeyChecking=no -o LogLevel=quiet -o BatchMode=yes'
...

23）awk打印除第一列之外的其他列

awk用来截取输入行中的某几列很有用，当时如果要排除某几列呢？

例如有如下的一个文件：
1
2
3
	
$ cat /tmp/test.txt
1 2 3 4 5
10 20 30 40 50

可以用下面的代码解决（来源）：
1
2
3
	
$ awk '{$1="";print $0}' /tmp/test.txt
 2 3 4 5
 20 30 40 50

但是前面多了一个空格，可以用cut命令稍微调整下：
1
2
3
	
$ awk '{$1="";print $0}' /tmp/test.txt | cut -c2-
2 3 4 5
20 30 40 50

 

附几则小技巧：

1）sudo iptables -L -n | vim -

2）grep -v xxx | vim -

3）echo $’\”

4）set — 1 2 3; echo “$@”

5）搜索stackoverflow/superuser等站点
